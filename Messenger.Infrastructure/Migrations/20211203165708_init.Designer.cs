// <auto-generated />
using System;
using Messenger.Infrastructure.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

namespace Messenger.Infrastructure.Migrations
{
    [DbContext(typeof(MessengerDbContext))]
    [Migration("20211203165708_init")]
    partial class init
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 63)
                .HasAnnotation("ProductVersion", "5.0.12")
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

            modelBuilder.Entity("ChatUser", b =>
                {
                    b.Property<Guid>("UserChatsId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("UsersInChatId")
                        .HasColumnType("uuid");

                    b.HasKey("UserChatsId", "UsersInChatId");

                    b.HasIndex("UsersInChatId");

                    b.ToTable("ChatUser");
                });

            modelBuilder.Entity("Messenger.Domain.Chat", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("AdminId")
                        .HasColumnType("uuid");

                    b.Property<DateTimeOffset>("CreationTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Title")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("AdminId");

                    b.ToTable("Chats");
                });

            modelBuilder.Entity("Messenger.Domain.Message", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid?>("ChatId")
                        .HasColumnType("uuid");

                    b.Property<DateTimeOffset>("CreationTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<string>("Text")
                        .HasColumnType("text");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("ChatId");

                    b.HasIndex("UserId");

                    b.ToTable("Messages");
                });

            modelBuilder.Entity("Messenger.Domain.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("text");

                    b.Property<string>("Username")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("ChatUser", b =>
                {
                    b.HasOne("Messenger.Domain.Chat", null)
                        .WithMany()
                        .HasForeignKey("UserChatsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Messenger.Domain.User", null)
                        .WithMany()
                        .HasForeignKey("UsersInChatId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Messenger.Domain.Chat", b =>
                {
                    b.HasOne("Messenger.Domain.User", "Admin")
                        .WithMany("UserChatAsAdmin")
                        .HasForeignKey("AdminId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Admin");
                });

            modelBuilder.Entity("Messenger.Domain.Message", b =>
                {
                    b.HasOne("Messenger.Domain.Chat", "Chat")
                        .WithMany("MessagesInChat")
                        .HasForeignKey("ChatId");

                    b.HasOne("Messenger.Domain.User", "User")
                        .WithMany("UserMessages")
                        .HasForeignKey("UserId");

                    b.Navigation("Chat");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Messenger.Domain.Chat", b =>
                {
                    b.Navigation("MessagesInChat");
                });

            modelBuilder.Entity("Messenger.Domain.User", b =>
                {
                    b.Navigation("UserChatAsAdmin");

                    b.Navigation("UserMessages");
                });
#pragma warning restore 612, 618
        }
    }
}
